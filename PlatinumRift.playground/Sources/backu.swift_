//import Glibc
import Foundation

public struct StderrOutputStream: TextOutputStream {
    public mutating func write(_ string: String) { fputs(string, stderr) }
}
public var errStream = StderrOutputStream()

func debug(_ message: Any) {
    print(message, to: &errStream)
}

enum Mode {
    case GAME
    case DEBUG
}

let mode = Mode.GAME

// TESTDATA
if mode == .DEBUG {
    func readLine() -> String? {
        return ""
    }
}

func getMainInputs() -> [String] {
    if mode == .DEBUG {
        return ["2", "0", "154", "301"]
        //return mainInputsData()
    }
    return (readLine()!).split{$0 == " "}.map(String.init)
}

func getZoneInput(_ index: Int) -> [String] {
    if mode == .DEBUG {
        //let zones = originalZoneInput()
        return ["0", "1"]
    }

    return (readLine()!).split{$0 == " "}.map(String.init)
}

func getLinkInput(_ index: Int) -> [String] {
    if mode == .DEBUG {
        //let links = originalLinkInput()
        return ["1", "2"]
    }

    return (readLine()!).split{$0 == " "}.map(String.init)
}

// HELPER
class Zone: Hashable, Equatable {
    let id: Int
    let platinum: Int

    var continent: Int?
    var owner: Int?
    var pods0: Int?
    var pods1: Int?
    var pods2: Int?
    var pods3: Int?

    var hashValue: Int {
        return id
    }

    init(id: Int, platinum: Int) {
        self.id = id
        self.platinum = platinum
    }

    func isEmpty() -> Bool {
        return pods0 == 0 && pods1 == 0 && pods2 == 0 && pods3 == 0
    }

    func pods(for owner: Int) -> Int {
        switch owner {
        case 0:
            return pods0 ?? 0
        case 1:
            return pods1 ?? 0
        case 2:
            return pods2 ?? 0
        case 3:
            return pods3 ?? 0
        default:
            return 0
        }
    }

    func pods(notFor owner: Int) -> Int {
        switch owner {
        case 0:
            return (pods1 ?? 0) + (pods2 ?? 0) + (pods3 ?? 0)
        case 1:
            return (pods0 ?? 0) + (pods2 ?? 0) + (pods3 ?? 0)
        case 2:
            return (pods0 ?? 0) + (pods1 ?? 0) + (pods3 ?? 0)
        case 3:
            return (pods0 ?? 0) + (pods1 ?? 0) + (pods2 ?? 0)
        default:
            return 0
        }
    }
}

func ==(lhs: Zone, rhs: Zone) -> Bool {
    return lhs.id == rhs.id
}

struct Link {
    let zone1: Int
    let zone2: Int

    func otherZone(for id: Int) -> Int {
        if zone1 == id {
            return zone2
        }
        return zone1
    }
}


/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

// GAME VARIABLES
var zones: Set<Zone> = []
var links: [Link] = []

let inputs = getMainInputs()
let playerCount = Int(inputs[0])! // the amount of players (2 to 4)
let myId = Int(inputs[1])! // my player ID (0, 1, 2 or 3)
let zoneCount = Int(inputs[2])! // the amount of zones on the map
let linkCount = Int(inputs[3])! // the amount of links between all zones

if zoneCount > 0 {
    for i in 0...(zoneCount-1) {
        let inputs = getZoneInput(i)
        let zoneId = Int(inputs[0])! // this zone's ID (between 0 and zoneCount-1)
        let platinumSource = Int(inputs[1])! // the amount of Platinum this zone can provide per game turn
        zones.insert(Zone(id: zoneId, platinum: platinumSource))
    }
}

if linkCount > 0 {
    for i in 0...(linkCount-1) {
        let inputs = getLinkInput(i)
        let zone1 = Int(inputs[0])!
        let zone2 = Int(inputs[1])!
        links.append(Link(zone1: zone1, zone2: zone2))
    }
}

// MARK: Helper

typealias LinkedZones = (neutral: Set<Zone>, others: Set<Zone>, own: Set<Zone> )

func linkedSeperatedZones(for zoneId: Int, in continentZones: Set<Zone>) -> LinkedZones {
    let zoneLinks = links.filter({ $0.zone1 == zoneId || $0.zone2 == zoneId })

    var neutralZones: Set<Zone> = []
    var otherZones: Set<Zone> = []
    var ownZones: Set<Zone> = []

    for link in zoneLinks {
        let linkedZoneId = link.otherZone(for: zoneId)
        if let linkedZone = continentZones.first(where: { $0.id == linkedZoneId }) {
            if linkedZone.owner == -1 {
                neutralZones.insert(linkedZone)
            } else if linkedZone.owner == myId {
                ownZones.insert(linkedZone)
            } else {
                otherZones.insert(linkedZone)
            }
        }
    }

    return (neutralZones, otherZones, ownZones)
}

func zoneWithLinkedOtherZone(for id: Int) -> Zone? {
    let zone = zones.first { zone -> Bool in
        guard zone.owner == myId else {
            return false
        }
        let linkedZones = linkedSeperatedZones(for: zone.id, in: zones)
        return !linkedZones.others.isEmpty || !linkedZones.neutral.isEmpty
    }
    return zone
}

var checkedZones: Set<Zone> = []

func zoneToMove(for lookableZones: Set<Zone>, onStep step: Int) -> (zone: Zone, step: Int)? {

    for zone in lookableZones {
        // already checked, so ignore
        if checkedZones.contains(zone) {
            continue
        }
        let linkedZones = linkedSeperatedZones(for: zone.id, in: zones)
        if linkedZones.neutral.isEmpty && linkedZones.others.isEmpty {
            continue
        }
        return (zone, step)
    }

    var zonesToMove: [(zone: Zone, step: Int)] = []
    for zone in lookableZones {
        // already checked, so ignore
        if checkedZones.contains(zone) {
            continue
        }
        checkedZones.insert(zone)
        // its the same than bevore. it will take the first found match, which
        // is not the shortest.damn
        let linkedZones = linkedSeperatedZones(for: zone.id, in: zones)
        if let mZone = zoneToMove(for: linkedZones.own, onStep: step + 1){
            zonesToMove.append(mZone)
        }
    }

    guard !zonesToMove.isEmpty else {
        return nil
    }
    return zonesToMove.sorted(by: {$0.step < $1.step}).first!
}

var continents: [Set<Zone>] = []
func buildContinents() {
    var zonesToRemove = zones

    func addZonesToContinent(for zone: Zone, withContinentId continentId: Int) {
        if let removableZoneIndex = zonesToRemove.index(where: { $0.id == zone.id}) {
            zonesToRemove.remove(at: removableZoneIndex)
        }

        continents[continentId].insert(zone)
        let zoneLinks = links.filter({ $0.zone1 == zone.id || $0.zone2 == zone.id })
        for link in zoneLinks {
            let otherZoneId = link.otherZone(for: zone.id)
            guard let otherZone = zonesToRemove.first(where: { $0.id == otherZoneId }),
                !continents[continentId].contains(otherZone) else {
                    continue
            }
            addZonesToContinent(for: otherZone, withContinentId: continentId)
        }
    }
    // while continents zones count != zones
    var continentNumber = 0
    repeat {
        if let zone = zonesToRemove.first {
            continents.append([])
            addZonesToContinent(for: zone, withContinentId: continentNumber)
        }

        continentNumber += 1
    } while !zonesToRemove.isEmpty

    continents.sort(by: {$0.count < $1.count})
}

buildContinents()

var firstRound = true


// game loop
while mode == .GAME {
    let platinum = Int(readLine()!)! // my available Platinum
    if zoneCount > 0 {
        for _ in 0...(zoneCount-1) {
            let inputs = (readLine()!).split{$0 == " "}.map(String.init)
            let zId = Int(inputs[0])! // this zone's ID
            guard let zone = zones.first(where: {$0.id == zId}) else {
                continue
            }
            let ownerId = Int(inputs[1])! // the player who owns this zone (-1 otherwise)
            let podsP0 = Int(inputs[2])! // player 0's PODs on this zone
            let podsP1 = Int(inputs[3])! // player 1's PODs on this zone
            let podsP2 = Int(inputs[4])! // player 2's PODs on this zone (always 0 for a two player game)
            let podsP3 = Int(inputs[5])! // player 3's PODs on this zone (always 0 for a two or three player game)

            zone.owner = ownerId
            zone.pods0 = podsP0
            zone.pods1 = podsP1
            zone.pods2 = podsP2
            zone.pods3 = podsP3
        }
    }

    // first line for movement commands, second line for POD purchase (see the protocol in the statement for details)
    // BOTS MOVEMENT
    //debug("\()")
    var moveOutput = ""

    for cZones in continents {
        // sort ... maybe
        if cZones.filter({ $0.owner == myId }).count == zones.count {
            continue
        }
        let zonesWithMyBots = cZones.filter({ $0.pods(for: myId) > 0 })
        if zonesWithMyBots.isEmpty {
            continue
        }

        for zone in zonesWithMyBots {
            let linkedZones = linkedSeperatedZones(for: zone.id, in: cZones)
            var bots = zone.pods(for: myId)

            // enemy
            // check if pods can kill them
            // if not, there should spawn new ones here, with needed amount?
            if bots > 0 &&  !linkedZones.others.isEmpty {
                var botsPerBase = max(1, Int(floor(Float(bots) / Float(linkedZones.others.count))))
                for eZone in linkedZones.others {
                    if eZone.pods(notFor: myId) > 0 && botsPerBase > 2 {
                        botsPerBase -= 2
                        bots -= 2
                    }
                    moveOutput.append("\(botsPerBase) \(zone.id) \(eZone.id) ")
                    bots -= botsPerBase
                    if bots <= 0 {
                        break;
                    }
                }
            }

            // Neutal
            // check the moveable zone, if its not linked, send only one bot
            // if its linked with more than one, than check what to do.
            // i want to use all bots
            if bots > 0 &&  !linkedZones.neutral.isEmpty {

                let botsPerBase = max(1, Int(floor(Float(bots) / Float(linkedZones.neutral.count))))
                for nZone in linkedZones.neutral {
                    moveOutput.append("\(botsPerBase) \(zone.id) \(nZone.id) ")
                    bots -= botsPerBase

                    if bots <= 0 {
                        break
                    }
                }
            }

            // mys
            // proof if the target has moveable positions ...
            // what if not?
            // how to move the bot to a useful place?
            if bots > 0 {
                debug("Zone: \(zone.id)")
                checkedZones = []
                if let moveableZone = zoneToMove(for: linkedZones.own, onStep: 0) {
                    debug("\(moveableZone.zone.id) - \(moveableZone.step)")
                    moveOutput.append("\(bots) \(zone.id) \(moveableZone.zone.id) ")
                }
            }
        }
    }

    print(moveOutput.isEmpty ? "WAIT": String(moveOutput[..<moveOutput.index(before: moveOutput.endIndex)]))

    // MARK: BOT DEPLOYMENT
    let botsToBuy = Int(floor(Double(platinum) / 20))
    guard botsToBuy > 1 else  {
        print("WAIT")
        continue
    }
    var buyOutput = ""


    let sortedZones: [Zone]

    // yes, the first round will infiltrate the biggest continent
    if firstRound {
        sortedZones = continents.last!.sorted(by: {$0.platinum > $1.platinum })
        firstRound = false
    } else {
        sortedZones = zones.sorted(by: {$0.platinum > $1.platinum })
    }

    for _ in 1...botsToBuy {
        var zoneId: Int?
        // does it makes sense to hunt the platinum zones?
        // maybe on of my zones get attacked and needs to be protected
        // this will mix my bots all over the world ... no teamwork ... :)
        // currently i dont care of others
        if let emptyZone = sortedZones.first(where: { $0.owner == -1 }) {
            zoneId = emptyZone.id
            emptyZone.owner = myId
            //debug("EMPTY ZONE BOT PLACED")
        } else if let usefullZone = zoneWithLinkedOtherZone(for: myId) {
            // this will be a zone, where empty or enemy zones are in range
            zoneId = usefullZone.id
            //debug("ZONE WITH OTHER BOT PLACED")
        } else if let zoneWithoutEnemy = sortedZones.first(where: { $0.owner == myId }) {
            zoneId = zoneWithoutEnemy.id
            //debug("MY ZONE STRONGYFIED")
        }

        if let id = zoneId {
            // the amount of bots, will be calculated later
            buyOutput.append("1 \(id) ")
        }
    }
    print(buyOutput.isEmpty ? "WAIT": String(buyOutput[..<buyOutput.index(before: buyOutput.endIndex)]))
}

